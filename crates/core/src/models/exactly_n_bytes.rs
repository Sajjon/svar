use crate::prelude::*;

pub type Exactly60Bytes = ExactlyNBytes<60>;
pub type Exactly32Bytes = ExactlyNBytes<32>;
pub type Exactly16Bytes = ExactlyNBytes<16>;
pub type Exactly12Bytes = ExactlyNBytes<12>;

#[derive(
    Zeroize,
    Clone,
    Copy,
    PartialEq,
    Eq,
    Hash,
    Ord,
    PartialOrd,
    SerializeDisplay,
    DeserializeFromStr,
    derive_more::Display,
    derive_more::From,
    derive_more::Debug,
)]
#[display("{}", self.to_hex())]
#[debug("{}", self.to_hex())]
pub struct ExactlyNBytes<const N: usize>(pub [u8; N]);

use std::str::FromStr;
impl<const N: usize> std::str::FromStr for ExactlyNBytes<N> {
    type Err = crate::Error;

    fn from_str(s: &str) -> Result<Self> {
        hex_decode(s)
            .map_err(|e| Error::InvalidHex {
                underlying: e.to_string(),
            })
            .and_then(Self::try_from)
    }
}

impl<const N: usize> ExactlyNBytes<N> {
    pub fn bytes(&self) -> &[u8; N] {
        &self.0
    }

    pub fn xor(&self, other: &Self) -> Self {
        let mut result = [0u8; N];
        for i in 0..N {
            result[i] = self.0[i] ^ other.0[i];
        }
        Self(result)
    }

    /// Instantiates a new `ExactlyNBytes<N>` from bytes generated by
    /// a CSPRNG.
    pub fn generate() -> Self {
        Self::from(&generate_byte_array::<N>())
    }

    /// Tries to decode the string `s` into this type. Will fail
    // if the string is not valid hex or if the decoded bytes does
    // not have length `N`.
    pub fn from_hex(s: &str) -> Result<Self> {
        Self::from_str(s)
    }

    pub fn to_hex(self) -> String {
        hex_encode(self.0)
    }

    pub fn to_vec(self) -> Vec<u8> {
        self.0.to_vec()
    }
}

impl<const N: usize> TryFrom<&[u8]> for ExactlyNBytes<N> {
    type Error = crate::Error;

    fn try_from(value: &[u8]) -> Result<Self> {
        if value.len() == N {
            Ok(Self(value.try_into().unwrap()))
        } else {
            Err(Error::InvalidByteCount {
                expected: N,
                found: value.len(),
            })
        }
    }
}

impl<const N: usize> TryFrom<Vec<u8>> for ExactlyNBytes<N> {
    type Error = crate::Error;

    fn try_from(value: Vec<u8>) -> Result<Self> {
        Self::try_from(value.as_slice())
    }
}

impl<const N: usize> AsRef<[u8]> for ExactlyNBytes<N> {
    fn as_ref(&self) -> &[u8] {
        self.bytes()
    }
}

impl<const N: usize> From<&[u8; N]> for ExactlyNBytes<N> {
    fn from(value: &[u8; N]) -> Self {
        Self(*value)
    }
}

impl<const N: usize> HasSampleValues for ExactlyNBytes<N> {
    /// `deadbeef...``
    /// A sample used to facilitate unit tests.
    fn sample() -> Self {
        Self::sample_dead()
    }

    /// A sample used to facilitate unit tests.
    fn sample_other() -> Self {
        Self::sample_fade()
    }
}

impl<const N: usize> ExactlyNBytes<N> {
    fn declare_sample(r: &str) -> Self {
        let mut s = r.repeat(N / 2).to_owned();

        let target_len = N * 2;

        if s.len() != target_len {
            let bc = format!("{}", N);
            let bc_len = bc.len();
            let subs = &s[0..target_len - bc_len];
            s = format!("{}{}", bc, subs);
            assert_eq!(s.len(), target_len);
        }
        Self::from_str(&s).expect("Valid sample")
    }

    /// `aced...``
    /// A sample used to facilitate unit tests.
    pub fn sample_aced() -> Self {
        Self::declare_sample("aced")
    }

    /// `babe...``
    /// A sample used to facilitate unit tests.
    pub fn sample_babe() -> Self {
        Self::declare_sample("babe")
    }

    /// `cafe...``
    /// A sample used to facilitate unit tests.
    pub fn sample_cafe() -> Self {
        Self::declare_sample("cafe")
    }

    /// `dead...``
    /// A sample used to facilitate unit tests.
    pub fn sample_dead() -> Self {
        Self::declare_sample("dead")
    }

    /// `ecad...``
    /// A sample used to facilitate unit tests.
    pub fn sample_ecad() -> Self {
        Self::declare_sample("ecad")
    }

    /// `fade...``
    /// A sample used to facilitate unit tests.
    pub fn sample_fade() -> Self {
        Self::declare_sample("fade")
    }
}
